{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\surf\\\\surfun\\\\client\\\\src\\\\components\\\\pages\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport LoginModal from '../core/LoginModal';\nimport JoinModal from '../core/JoinModal';\nimport WeatherDisplay from '../../components/widgets/WeatherDisplay';\nimport getWeatherData from '../../services/WeatherService';\nimport MapView from '../../components/widgets/MapView';\nimport '../../assets/scss/Main.scss';\nimport { useNavigate } from 'react-router-dom';\nimport Favorites from '../widgets/Favorites';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Main({\n  onLoginSuccess\n}) {\n  _s();\n  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false); // 로그인 모달 열림 여부\n  const [isJoinModalOpen, setIsJoinModalOpen] = useState(false); // 회원가입 모달 열림 여부\n  const [loggedIn, setLoggedIn] = useState(false); // 로그인 상태\n  const [weatherData, setWeatherData] = useState(null); // 날씨 데이터\n  const [error, setError] = useState(''); // 에러 메시지\n  const [latitude, setLatitude] = useState(33.4996); // 제주도 위도\n  const [longitude, setLongitude] = useState(126.5312); // 제주도 경도\n  const [username, setUsername] = useState(''); // 로그인한 사용자 이름\n  const navigate = useNavigate(); // 페이지 이동을 위한 hook\n\n  // 로그인 모달 토글 함수\n  const toggleLoginModal = () => {\n    setIsLoginModalOpen(!isLoginModalOpen);\n  };\n\n  // 회원가입 모달 토글 함수\n  const toggleJoinModal = () => {\n    setIsJoinModalOpen(!isJoinModalOpen);\n  };\n\n  // 로그인 성공 시 호출되는 함수\n  const handleLoginSuccess = async loggedInUsername => {\n    setLoggedIn(true);\n    setUsername(loggedInUsername);\n    toggleLoginModal();\n    onLoginSuccess(loggedInUsername);\n\n    // 도시 이름 설정 (예: 제주)\n    const city = 'Jeju';\n    try {\n      console.log(`Fetching weather data for city: ${city}`);\n      const data = await getWeatherData(city);\n      setWeatherData(data);\n      setError(''); // 이전 에러 메시지 제거\n    } catch (error) {\n      console.error('Failed to fetch weather data:', error);\n      if (error.response && error.response.status >= 400 && error.response.status < 500) {\n        setError('Failed to fetch weather data. Please check the request and try again.');\n      } else if (error.response && error.response.status >= 500) {\n        setError('Failed to fetch weather data. Server error, please try again later.');\n      } else {\n        setError('Failed to fetch weather data. Please try again later.');\n      }\n    }\n\n    // 로그인 성공 후 이동경로\n    navigate('/');\n  };\n\n  // 초기화 작업 (예: 현재 위치의 날씨 정보 가져오기)\n  useEffect(() => {\n    const fetchInitialWeatherData = async () => {\n      if (loggedIn) {\n        const city = 'Jeju'; // 예시 도시 설정\n        try {\n          const data = await getWeatherData(city);\n          setWeatherData(data);\n          setError('');\n        } catch (error) {\n          console.error('Failed to fetch initial weather data:', error);\n          setError('Failed to fetch weather data. Please try again later.');\n        }\n      }\n    };\n    fetchInitialWeatherData();\n  }, [loggedIn]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Main\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          autoPlay: true,\n          loop: true,\n          muted: true,\n          className: \"video-background\",\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: \"/videos/surfing.mp4\",\n            type: \"video/mp4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"welcome-message\",\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Welcome to SurFun\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Favorites, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [!loggedIn && /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), loggedIn && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: 'red'\n            },\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this), weatherData && /*#__PURE__*/_jsxDEV(WeatherDisplay, {\n            weatherData: weatherData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"map-container\",\n            children: /*#__PURE__*/_jsxDEV(MapView, {\n              latitude: latitude,\n              longitude: longitude\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(Main, \"1sRITzFume/sKasUiqC1UzQK7lE=\", false, function () {\n  return [useNavigate];\n});\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","LoginModal","JoinModal","WeatherDisplay","getWeatherData","MapView","useNavigate","Favorites","jsxDEV","_jsxDEV","Fragment","_Fragment","Main","onLoginSuccess","_s","isLoginModalOpen","setIsLoginModalOpen","isJoinModalOpen","setIsJoinModalOpen","loggedIn","setLoggedIn","weatherData","setWeatherData","error","setError","latitude","setLatitude","longitude","setLongitude","username","setUsername","navigate","toggleLoginModal","toggleJoinModal","handleLoginSuccess","loggedInUsername","city","console","log","data","response","status","fetchInitialWeatherData","children","className","autoPlay","loop","muted","src","type","fileName","_jsxFileName","lineNumber","columnNumber","style","color","_c","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/surf/surfun/client/src/components/pages/Main.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport LoginModal from '../core/LoginModal';\r\nimport JoinModal from '../core/JoinModal';\r\nimport WeatherDisplay from '../../components/widgets/WeatherDisplay';\r\nimport getWeatherData from '../../services/WeatherService';\r\nimport MapView from '../../components/widgets/MapView';\r\nimport '../../assets/scss/Main.scss';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Favorites from '../widgets/Favorites';\r\n\r\nfunction Main({ onLoginSuccess }) {\r\n    const [isLoginModalOpen, setIsLoginModalOpen] = useState(false); // 로그인 모달 열림 여부\r\n    const [isJoinModalOpen, setIsJoinModalOpen] = useState(false); // 회원가입 모달 열림 여부\r\n    const [loggedIn, setLoggedIn] = useState(false); // 로그인 상태\r\n    const [weatherData, setWeatherData] = useState(null); // 날씨 데이터\r\n    const [error, setError] = useState(''); // 에러 메시지\r\n    const [latitude, setLatitude] = useState(33.4996); // 제주도 위도\r\n    const [longitude, setLongitude] = useState(126.5312); // 제주도 경도\r\n    const [username, setUsername] = useState(''); // 로그인한 사용자 이름\r\n    const navigate = useNavigate(); // 페이지 이동을 위한 hook\r\n\r\n    // 로그인 모달 토글 함수\r\n    const toggleLoginModal = () => {\r\n        setIsLoginModalOpen(!isLoginModalOpen);\r\n    };\r\n\r\n    // 회원가입 모달 토글 함수\r\n    const toggleJoinModal = () => {\r\n        setIsJoinModalOpen(!isJoinModalOpen);\r\n    };\r\n\r\n    // 로그인 성공 시 호출되는 함수\r\n    const handleLoginSuccess = async (loggedInUsername) => {\r\n        setLoggedIn(true);\r\n        setUsername(loggedInUsername);\r\n        toggleLoginModal();\r\n        onLoginSuccess(loggedInUsername);\r\n\r\n        // 도시 이름 설정 (예: 제주)\r\n        const city = 'Jeju';\r\n\r\n        try {\r\n            console.log(`Fetching weather data for city: ${city}`);\r\n            const data = await getWeatherData(city);\r\n            setWeatherData(data);\r\n            setError(''); // 이전 에러 메시지 제거\r\n        } catch (error) {\r\n            console.error('Failed to fetch weather data:', error);\r\n\r\n            if (error.response && (error.response.status >= 400 && error.response.status < 500)) {\r\n                setError('Failed to fetch weather data. Please check the request and try again.');\r\n            } else if (error.response && (error.response.status >= 500)) {\r\n                setError('Failed to fetch weather data. Server error, please try again later.');\r\n            } else {\r\n                setError('Failed to fetch weather data. Please try again later.');\r\n            }\r\n        }\r\n\r\n        // 로그인 성공 후 이동경로\r\n        navigate('/');\r\n    };\r\n\r\n    // 초기화 작업 (예: 현재 위치의 날씨 정보 가져오기)\r\n    useEffect(() => {\r\n        const fetchInitialWeatherData = async () => {\r\n            if (loggedIn) {\r\n                const city = 'Jeju'; // 예시 도시 설정\r\n                try {\r\n                    const data = await getWeatherData(city);\r\n                    setWeatherData(data);\r\n                    setError('');\r\n                } catch (error) {\r\n                    console.error('Failed to fetch initial weather data:', error);\r\n                    setError('Failed to fetch weather data. Please try again later.');\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchInitialWeatherData();\r\n    }, [loggedIn]);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"Main\">\r\n                {/* 비디오 배경 컨테이너 */}\r\n                <div className=\"video-container\">\r\n                    <video autoPlay loop muted className=\"video-background\">\r\n                        <source src=\"/videos/surfing.mp4\" type=\"video/mp4\" />\r\n                    </video>\r\n                    {/* 환영 메시지 */}\r\n                    <div className=\"welcome-message\">\r\n                        <h1>Welcome to SurFun</h1>\r\n                    </div>\r\n                    {/* 즐겨찾기 컴포넌트 */}\r\n                    <Favorites />\r\n                </div>\r\n\r\n                {/* 메인 컨텐츠 */}\r\n                <div className=\"content\">\r\n                    {!loggedIn && (\r\n                        <h1></h1>\r\n                    )}\r\n\r\n                    {loggedIn && (\r\n                        <>\r\n                            {error && (\r\n                                <p style={{ color: 'red' }}>{error}</p>\r\n                            )}\r\n\r\n                            {weatherData && (\r\n                                <WeatherDisplay weatherData={weatherData} />\r\n                            )}\r\n\r\n                            {/* 지도 컨테이너 */}\r\n                            <div className=\"map-container\">\r\n                                <MapView latitude={latitude} longitude={longitude} />\r\n                            </div>\r\n                        </>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}